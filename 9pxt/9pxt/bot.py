import logging
import asyncio
import pytz
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from robot import database
import aiohttp
from aiohttp import ClientSession
import json
import os
import re
from crypto import periodic_crypto_update
import subprocess
from io import StringIO
from robot.start import start_main, restart_main

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7519828441:AAGr4uFR2Caf35_UgQM97zG-K8dYgraD-oc'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

database.initialize()

class Form(StatesGroup):
    token = State()

class SettingsStates(StatesGroup):
    help_text = State()
    cooperation_text = State()
    rules_text = State()
    preorder_text = State()
    edit_card = State()
    edit_btc = State()

class MailingStates(StatesGroup):
    mailing_text = State()
    mailing_photo = State()
    daily_mailing_time = State()

class ProductAddStates(StatesGroup):
    city = State()
    product_name = State()
    photo = State()
    product_description = State()
    product_price = State()
    
async def daily_mailing_task():
    moscow_tz = pytz.timezone('Europe/Moscow')
    while True:
        now_utc = datetime.utcnow().replace(tzinfo=pytz.utc)
        now_msk = now_utc.astimezone(moscow_tz)
        mailings = database.get_daily_mailings()
        for mailing in mailings:
            mailing_time = datetime.strptime(mailing[1], "%H:%M").time()
            current_time_msk = now_msk.time()
            if current_time_msk >= mailing_time and (datetime.combine(datetime.today(), current_time_msk) - datetime.combine(datetime.today(), mailing_time)) < timedelta(minutes=1):
                tokens = database.get_tokens()
                for token in tokens:
                    bot_child = Bot(token=token[0])
                    users = database.get_users_by_token(token[0])
                    for user in users:
                        user_id = user[0]
                        try:
                            if mailing[3]:  
                                absolute_photo_path = os.path.abspath(mailing[3])
                                with open(absolute_photo_path, 'rb') as photo_file:
                                    await bot_child.send_photo(user_id, photo=photo_file, caption=mailing[2], parse_mode='HTML')
                            else:
                                await bot_child.send_message(user_id, text=mailing[2], parse_mode='HTML')
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        await bot_child.close()
        await asyncio.sleep(60)  

main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å –ë–æ—Ç–∞"), KeyboardButton("ü§ñ –¢–µ–∫—É—â–∏–µ –ë–æ—Ç—ã"))
main_keyboard.add(KeyboardButton("üßëüèº‚Äçüíª–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))

cancel_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–∏–º –ë–æ—Ç–æ–º.", reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å –ë–æ—Ç–∞", state="*")
async def add_bot(message: types.Message, state: FSMContext):
    await state.finish()  
    await Form.token.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:", reply_markup=cancel_keyboard)

@dp.message_handler(state=Form.token)
async def process_token(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        return

    tokens = message.text.split('\n')
    for token in tokens:
        try:
            temp_bot = Bot(token=token)
            bot_user = await temp_bot.get_me()
            username = bot_user.username
            await temp_bot.close()

            database.add_token(token, username)
            await message.answer(f"–ë–æ—Ç @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º {token}: {e}", reply_markup=main_keyboard)

    restart_main()
    await state.finish()
    
@dp.message_handler(commands=['get'])
async def get_database_info(message: types.Message):
    database_info = database.get_full_database_info()
    link = await upload_text(database_info)
    await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {link}")

@dp.message_handler(commands=['delcity'])
async def command_delete_city(message: types.Message):
    city_ids = message.get_args().replace(" ", "").split(",")
    deleted_ids = []
    for city_id in city_ids:
        if city_id.isdigit():
            database.delete_city(int(city_id))
            deleted_ids.append(city_id)
    if deleted_ids:
        await message.reply(f"–ì–æ—Ä–æ–¥–∞ —Å ID {', '.join(deleted_ids)} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –≥–æ—Ä–æ–¥–æ–≤.")

@dp.message_handler(commands=['delcategory'])
async def command_delete_category(message: types.Message):
    category_ids = message.get_args().replace(" ", "").split(",")
    deleted_ids = []
    for category_id in category_ids:
        if category_id.isdigit():
            database.delete_category(int(category_id))
            deleted_ids.append(category_id)
    if deleted_ids:
        await message.reply(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID {', '.join(deleted_ids)} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

@dp.message_handler(commands=['delproduct'])
async def command_delete_product(message: types.Message):
    product_ids = message.get_args().replace(" ", "").split(",")
    deleted_ids = []
    for product_id in product_ids:
        if product_id.isdigit():
            database.delete_product(int(product_id))
            deleted_ids.append(product_id)
    if deleted_ids:
        await message.reply(f"–¢–æ–≤–∞—Ä—ã —Å ID {', '.join(deleted_ids)} —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID —Ç–æ–≤–∞—Ä–æ–≤.")

@dp.message_handler(lambda message: message.text == "ü§ñ –¢–µ–∫—É—â–∏–µ –ë–æ—Ç—ã", state="*")
async def current_bots(message: types.Message, state: FSMContext):
    await state.finish()
    bots = database.get_tokens()
    bots_info = StringIO()

    for index, bot in enumerate(bots, start=1):
        token, username = bot
        bots_info.write(f"{index}. –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}, –¢–æ–∫–µ–Ω:\n{token}\n\n")

    bots_info.seek(0)
    await message.answer_document(types.InputFile(bots_info, filename="bots_info.txt"))

@dp.callback_query_handler(filters.Text(startswith="delete_"))
@dp.message_handler(commands=['delbot'])
async def delete_bot(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete <token>")
        return

    token = parts[1]
    database.delete_token(token)
    await message.reply("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    restart_main()
                           
@dp.message_handler(commands=['delete'])
async def delete_everything(message: types.Message):
    database.clear_database()

    await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")

@dp.message_handler(lambda message: message.text == "üßëüèº‚Äçüíª–ù–∞—Å—Ç—Ä–æ–π–∫–∏", state="*")
async def settings(message: types.Message, state: FSMContext):
    await state.finish()
    total_users_count = database.get_total_users_count()  

    inline_kb = InlineKeyboardMarkup(row_width=2)
    inline_kb.add(
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="settings_products"),
        InlineKeyboardButton("----", callback_data="edit_help"),
        InlineKeyboardButton("----", callback_data="edit_cooperation"),
        InlineKeyboardButton("üî• –ù–û–í–´–ï –ö–û–ù–¢–ê–ö–¢–´", callback_data="edit_rules"),
        InlineKeyboardButton("–†–µ–∫–≤–µ–∑–∏—Ç—ã", callback_data="payment"),
        InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="settings_mailing"),
        InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="daily_mailing_check")
    )
    settings_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(total_users_count)
    await message.answer(settings_text, reply_markup=inline_kb)

@dp.callback_query_handler(lambda c: c.data == 'settings_products')
async def add_product_start(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=markup)
    await ProductAddStates.city.set()

@dp.message_handler(state=ProductAddStates.city, content_types=types.ContentTypes.TEXT)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")))
    await ProductAddStates.product_name.set()

@dp.message_handler(state=ProductAddStates.product_name, content_types=types.ContentTypes.TEXT)
async def process_product_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product_name'] = message.text

    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–∏–ø –∫–ª–∞–¥–∞:")
    await ProductAddStates.photo.set()

@dp.message_handler(state=ProductAddStates.photo, content_types=types.ContentTypes.TEXT)
async def process_product_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['klad_type'] = message.text 

    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '0', –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç):", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")))
    await ProductAddStates.next()

@dp.message_handler(state=ProductAddStates.product_description, content_types=types.ContentTypes.TEXT)
async def process_product_description(message: types.Message, state: FSMContext):
    description = message.text if message.text != '0' else None
    async with state.proxy() as data:
        data['product_description'] = description
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–≤–µ—Å:—Ü–µ–Ω–∞(—Ä–∞–π–æ–Ω1,—Ä–∞–π–æ–Ω2)' –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")))
    await ProductAddStates.next()


@dp.message_handler(state=ProductAddStates.product_price, content_types=types.ContentTypes.TEXT)
async def process_product_price(message: types.Message, state: FSMContext):
    price_data = message.text
    price_entries = price_data.split('\n')

    async with state.proxy() as data:
        city_id = database.add_city_if_not_exists(data['city'])
        product_name_id = database.add_product(data['product_name'], city_id)

        for entry in price_entries:
            try:
                weight_price, districts = entry.split('(')
                weight, price = weight_price.split(':')
                districts = districts.strip(')').strip()
                weight = float(weight.strip())
                price = float(price.strip())

                database.add_product_details(product_name_id, data['product_description'], weight, price, districts,
                                             data['klad_type'])

                await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {weight} –∫–≥ - {price} —Ä—É–±., –†–∞–π–æ–Ω—ã: {districts}")
            except ValueError as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ '{entry}': {e}")
                continue

        await message.answer("–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'settings_mailing')
async def mailing_start(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞):",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    )
    await MailingStates.mailing_text.set()

@dp.message_handler(state=MailingStates.mailing_text, content_types=types.ContentTypes.TEXT)
async def process_mailing_text(message: types.Message, state: FSMContext):
    await state.update_data(mailing_text=message.text)
    skip_photo_button = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo"))
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=skip_photo_button)
    await MailingStates.next()

@dp.callback_query_handler(lambda c: c.data == 'skip_photo', state=MailingStates.mailing_photo)
async def skip_photo(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(mailing_photo=None)
    data = await state.get_data()
    mailing_text = data['mailing_text']
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ.\n\n" + mailing_text,
        reply_markup=InlineKeyboardMarkup().row(
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
            InlineKeyboardButton("üïù –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="daily_mailing")
        ).add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")),
        parse_mode='HTML'
    )

@dp.message_handler(content_types=['photo'], state=MailingStates.mailing_photo)
async def process_mailing_photo(message: types.Message, state: FSMContext):
    file_info = await bot.get_file(message.photo[-1].file_id)
    file_url = f'https://api.telegram.org/file/bot{API_TOKEN}/{file_info.file_path}'
    file_name = f"temp_{message.photo[-1].file_id}.jpg"
    await download_file(file_url, file_name)
    await state.update_data(mailing_photo=file_name)
    data = await state.get_data()
    mailing_text = data['mailing_text']
    await message.answer(
        "–í—Å–µ –≤–µ—Ä–Ω–æ?\n\n" + mailing_text,
        reply_markup=InlineKeyboardMarkup().row(
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
            InlineKeyboardButton("üïù –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="daily_mailing")
        ).add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")),
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == 'confirm_send', state=MailingStates.mailing_photo)
async def confirm_and_send_mailing(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mailing_text = data['mailing_text']
    mailing_photo = data.get('mailing_photo')

    tokens = database.get_tokens()
    for token in tokens:
        bot_token = token[0]
        users = database.get_users_by_token(bot_token)
        bot_child = Bot(token=bot_token)

        for user in users:
            user_id = user[0]
            try:
                if mailing_photo:
                    absolute_photo_path = os.path.abspath(mailing_photo)
                    with open(absolute_photo_path, 'rb') as photo_file:
                        await bot_child.send_photo(user_id, photo=photo_file, caption=mailing_text, parse_mode='HTML')
                else:
                    await bot_child.send_message(user_id, text=mailing_text, parse_mode='HTML')
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await bot_child.close()

    if mailing_photo:
        os.remove(mailing_photo)  

    await bot.answer_callback_query(callback_query.id, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    await state.finish()
   
@dp.callback_query_handler(lambda c: c.data == 'daily_mailing', state=MailingStates.mailing_photo)
async def request_daily_mailing_time(callback_query: CallbackQuery, state: FSMContext):
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:00):"
    )
    await MailingStates.daily_mailing_time.set()

@dp.message_handler(state=MailingStates.daily_mailing_time, content_types=types.ContentTypes.TEXT)
async def set_daily_mailing_time(message: Message, state: FSMContext):
    time = message.text

    
    if not re.match(r"^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$", time):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:00).")
        return

    data = await state.get_data()
    mailing_text = data['mailing_text']
    mailing_photo = data.get('mailing_photo', None)
    mailing_photo_path = os.path.abspath(mailing_photo) if mailing_photo else None

    
    database.add_daily_mailing(time, mailing_text, mailing_photo_path)

    await bot.send_message(
        message.chat.id,
        f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∞ –Ω–∞ {time}."
    )
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'cancel_mail', state=MailingStates.mailing_text)
async def cancel_mailing(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.answer_callback_query(callback_query.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await bot.send_message(callback_query.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@dp.callback_query_handler(lambda c: c.data == 'daily_mailing_check')
async def check_daily_mailings(callback_query: types.CallbackQuery):
    mailings = database.get_daily_mailings()
    if not mailings:
        await bot.send_message(callback_query.from_user.id, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    markup = InlineKeyboardMarkup()
    for mailing in mailings:
        button_text = f"{mailing[1]} - {mailing[2][:10]}..."  
        callback_data = f"view_{mailing[0]}"  
        markup.add(InlineKeyboardButton(button_text, callback_data=callback_data))

    await bot.send_message(callback_query.from_user.id, "–í–æ—Ç —Ç–µ–∫—É—â–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith('view_'))
async def view_daily_mailing(callback_query: types.CallbackQuery):
    mailing_id = int(callback_query.data.split('_')[1])
    mailing = database.get_daily_mailing_by_id(mailing_id)
    
    if not mailing:
        await bot.answer_callback_query(callback_query.id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    text = f"–¢–µ–∫—Å—Ç: {mailing[2]}\n–í—Ä–µ–º—è: {mailing[1]}"
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"deletemail_{mailing[0]}"))

    if mailing[3]:
        with open(os.path.abspath(mailing[3]), 'rb') as photo_file:
            await bot.send_photo(callback_query.from_user.id, photo=photo_file, caption=text, reply_markup=markup)
    else:
        await bot.send_message(callback_query.from_user.id, text, reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith('deletemail_'))
async def delete_daily_mailing_handler(callback_query: types.CallbackQuery):
    mailing_id = int(callback_query.data.split('_')[1])
    mailing = database.get_daily_mailing_by_id(mailing_id)

    if mailing and mailing[3]:
        try:
            os.remove(os.path.abspath(mailing[3]))  
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    database.delete_daily_mailing(mailing_id)

    
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    
    mailings = database.get_daily_mailings()
    if not mailings:
        await bot.send_message(callback_query.from_user.id, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    markup = InlineKeyboardMarkup()
    for mailing in mailings:
        button_text = f"{mailing[1]} - {mailing[2][:10]}..."  
        callback_data = f"view_{mailing[0]}"  
        markup.add(InlineKeyboardButton(button_text, callback_data=callback_data))

    await bot.send_message(callback_query.from_user.id, "–í–æ—Ç —Ç–µ–∫—É—â–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == 'edit_help')
async def edit_help(callback_query: types.CallbackQuery):
    current_text = database.get_help_text()
    await bot.send_message(
        callback_query.from_user.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–º–æ—â–∏:\n\n–¢–µ–∫—É—â–∏–π:\n{current_text}",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    )
    await SettingsStates.help_text.set()

@dp.message_handler(state=SettingsStates.help_text)
async def process_new_help_text(message: types.Message, state: FSMContext):
    new_text = message.text
    database.set_help_text(new_text)
    await message.answer("–¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'edit_cooperation')
async def edit_cooperation(callback_query: types.CallbackQuery):
    current_text = database.get_cooperation_text()
    await bot.send_message(
        callback_query.from_user.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –°–æ—Ç—Ä—É–¥–Ω—á–µ—Å—Ç–≤–æ:\n\n–¢–µ–∫—É—â–∏–π:\n{current_text}",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    )
    await SettingsStates.cooperation_text.set()

@dp.message_handler(state=SettingsStates.cooperation_text)
async def process_new_cooperation_text(message: types.Message, state: FSMContext):
    new_text = message.text
    database.set_cooperation_text(new_text)
    await message.answer("–¢–µ–∫—Å—Ç –°–æ—Ç—Ä—É–¥–Ω—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'edit_rules')
async def edit_rules(callback_query: types.CallbackQuery):
    current_text = database.get_rules_text()
    await bot.send_message(
        callback_query.from_user.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–º–æ—â–∏:\n\n–¢–µ–∫—É—â–∏–π:\n{current_text}",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    )
    await SettingsStates.rules_text.set()

@dp.message_handler(state=SettingsStates.rules_text)
async def process_new_rules_text(message: types.Message, state: FSMContext):
    new_text = message.text
    database.set_rules_text(new_text)
    await message.answer("–¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'payment')
async def payment_options(callback_query: types.CallbackQuery):
    inline_kb = InlineKeyboardMarkup()
    inline_kb.add(
        InlineKeyboardButton("–ö–∞—Ä—Ç–∞", callback_data="edit_card"),
        InlineKeyboardButton("BTC", callback_data="edit_btc")
    )
    await callback_query.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=inline_kb
    )

@dp.callback_query_handler(lambda c: c.data == 'edit_card')
async def edit_card(callback_query: types.CallbackQuery):
    
    current_text = database.get_payment_details('card')
    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n–¢–µ–∫—É—â–∏–π:\n{current_text}",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    )
    await SettingsStates.edit_card.set()


@dp.message_handler(state=SettingsStates.edit_card)
async def process_new_card_details(message: types.Message, state: FSMContext):
    new_text = message.text
    database.set_payment_details('card', new_text)  
    await message.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'edit_btc')
async def edit_btc(callback_query: types.CallbackQuery):
    current_text = database.get_payment_details('btc')
    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π BTC –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n–¢–µ–∫—É—â–∏–π:\n{current_text}",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    )
    await SettingsStates.edit_btc.set()

@dp.message_handler(state=SettingsStates.edit_btc)
async def process_new_btc_details(message: types.Message, state: FSMContext):
    new_text = message.text
    database.set_payment_details('btc', new_text)
    await message.answer("BTC –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'cancel', state="*")
async def cancel_editing(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.answer_callback_query(callback_query.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await bot.send_message(callback_query.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)

async def download_file(file_url, file_name):
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            if resp.status == 200:
                with open(file_name, 'wb') as f:
                    f.write(await resp.read())

async def upload_text(get_text) -> str:
    async with ClientSession() as session:
        
        try:
            response = await session.post(
                "http://pastie.org/pastes/create",
                data={"language": "plaintext", "content": get_text}
            )
            get_link = response.url
            if "create" in str(get_link):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π —Ö–æ—Å—Ç–∏–Ω–≥")
        except Exception as e:
            
            response = await session.post(
                "https://www.friendpaste.com",
                json={"language": "text", "title": "", "snippet": get_text}
            )
            get_link = json.loads(await response.read())['url']

    return get_link

async def on_startup(_):
    start_main()
    asyncio.create_task(daily_mailing_task())
    asyncio.create_task(periodic_crypto_update())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
